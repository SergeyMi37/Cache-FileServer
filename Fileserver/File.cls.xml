<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Fileserver.File">
<Description>
Represents one file served on fileserver.</Description>
<Final>1</Final>
<IncludeCode>%occErrors</IncludeCode>
<Super>%Persistent</Super>
<TimeCreated>63879,84547</TimeCreated>
<ServerOnly>1</ServerOnly>

<Index name="DirName">
<Properties>Directory,Name</Properties>
<Unique>1</Unique>
</Index>

<Property name="file">
<Type>%Stream.FileBinary</Type>
<Internal>1</Internal>
<Private>1</Private>
<Required>1</Required>
<SqlColumnNumber>8</SqlColumnNumber>
</Property>

<Property name="Directory">
<Description>
Path of the file.</Description>
<Type>%VarString</Type>
<Required>1</Required>
<SqlColumnNumber>4</SqlColumnNumber>
</Property>

<Property name="Name">
<Description>
Name of the file (without path, but with extension).</Description>
<Type>%VarString</Type>
<Required>1</Required>
<SqlColumnNumber>5</SqlColumnNumber>
</Property>

<Property name="Extension">
<Description>
Extension of the file.</Description>
<Type>%VarString</Type>
<SqlColumnNumber>6</SqlColumnNumber>
</Property>

<Property name="Size">
<Description>
Size of the file in bytes.</Description>
<Type>%BigInt</Type>
<Required>1</Required>
<SqlColumnNumber>7</SqlColumnNumber>
<Parameter name="MINVAL" value="0"/>
</Property>

<Property name="DateCreated">
<Description><![CDATA[
Date of creation of the file in <i>YYYY-MM-DD hh:mm:ss</i> format.]]></Description>
<Type>%TimeStamp</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
</Property>

<Property name="DateModified">
<Description><![CDATA[
Date of modification of the file in <i>YYYY-MM-DD hh:mm:ss</i> format.]]></Description>
<Type>%TimeStamp</Type>
<Required>1</Required>
<SqlColumnNumber>3</SqlColumnNumber>
</Property>

<Property name="Downloads">
<Description>
All downloads of the file</Description>
<Type>Fileserver.Download</Type>
<Cardinality>many</Cardinality>
<Inverse>File</Inverse>
<Relationship>1</Relationship>
</Property>

<Method name="AddDir">
<Description><![CDATA[
<example>do ##class(Fileserver.File).AddDir("D:\Pictures\Desktop")</example>
Add files from directory <b>dir</b> to fileserver.<br>
<b>rec</b> - recursive: [true] - to add subfolders, [false] - so skip them.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>dir:%String,rec:%Boolean=$$$NO</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  #dim st As %Status = $$$OK
  if ##class(%File).DirectoryExists(dir)
  {
    try {
      // Build resultset of all files and subfolders in a directory
      set rs=##class(%SQL.Statement).%ExecDirect(,"SELECT Name,Type FROM %Library.File_FileSet(?,'*',,1)",dir)
      while rs.%Next() {
        if rs.Type'="D" //check for directories
        {
          $$$ThrowOnError(..AddFile(rs.Name))
        } else {
          if rec {
            $$$ThrowOnError(..AddDir(rs.Name,rec))
          }
        } 
      }
    } catch ex {    
      set st=ex.AsStatus()
    }
  } else {
    set st = $$$ERROR($$$DirectoryNotExist,dir)
  }
  quit st
]]></Implementation>
</Method>

<Method name="AddFile">
<Description><![CDATA[
Add file to fileserver.<br>
<b>file</b> - full filename with path.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>filename:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  #dim st As %Status = $$$OK
  if ##class(%File).Exists(filename)
  {
    try {
      set file=..%New()
      set file.Name=##class(%File).GetFilename(filename)
      set file.Directory=##class(%File).GetDirectory(filename)
      set file.Extension=$p(file.Name,".",*)
      set file.Size=##class(%File).GetFileSize(filename)
      set file.DateCreated=$ZDATETIME(##class(%File).GetFileDateCreated(filename),3)  
      set file.DateModified=$ZDATETIME(##class(%File).GetFileDateModified(filename),3)
      $$$ThrowOnError(file.file.LinkToFile(filename))
      $$$ThrowOnError(file.%Save())
    } catch ex {    
      set st=ex.AsStatus()
    }
  } else {
    set st = $$$ERROR($$$FileDoesNotExist,file)
  }
  quit st
]]></Implementation>
</Method>

<Method name="DelDir">
<Description><![CDATA[
Delete files from directory <b>dir</b> to fileserver.<br>
<b>rec</b> - recursive: [true] - to delete subfolders, [false] - so skip them.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>dir:%String,rec:%Boolean=$$$NO</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set dir=##class(%File).NormalizeDirectory(dir)
  if 'rec {
    &SQL(DELETE FROM Fileserver."File" WHERE Directory=:dir)
  } else {
    &SQL(DELETE FROM Fileserver."File" WHERE Directory %STARTSWITH :dir)
  }
  quit $select(SQLCODE=0:$$$OK,1:$$$ERROR($$$SQLError, SQLCODE, $GET(%msg)))
]]></Implementation>
</Method>

<Method name="DelFileById">
<Description><![CDATA[
Delete file from fileserver.<br>
<b>fileid</b> - id of <class>Fileserver.File</class>.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>fileid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  &SQL(DELETE FROM Fileserver."File" WHERE %ID=:fileid)
  quit $select(SQLCODE=0:$$$OK,1:$$$ERROR($$$SQLError, SQLCODE, $GET(%msg)))
]]></Implementation>
</Method>

<Method name="DelFile">
<Description><![CDATA[
Delete file from fileserver.<br>
<b>fileid</b> - id of <class>Fileserver.File</class>.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>filedir:%String,filename:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  &SQL(DELETE FROM Fileserver."File" WHERE Directory=:filedir and Name=:filename)
  quit $select(SQLCODE=0:$$$OK,1:$$$ERROR($$$SQLError, SQLCODE, $GET(%msg)))
]]></Implementation>
</Method>

<Method name="UpdDir">
<Description><![CDATA[
<example>do ##class(Fileserver.File).UpdDir("D:\Pictures\Desktop")</example>
Update files from directory <b>dir</b> on fileserver.<br>
<b>rec</b> - recursive: [true] - to update subfolders, [false] - so skip them.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>dir:%String={$GET(^Settings("user_files_dir"),##class(Fileserver.JSON).#UserFilesDir)},rec:%Boolean=$$$YES</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  #dim st As %Status = $$$OK
  try {
    set dir=##class(%File).NormalizeDirectory(dir)
    if ##class(%File).DirectoryExists(dir)
    {     
      set rs=##class(%SQL.Statement).%ExecDirect(,"SELECT Name,Type,ItemName FROM %Library.File_FileSet(?,'*',,1)",dir)
      while rs.%Next() {
        if rs.Type'="D" { //check for directories
          set $list(dirfiles,*+1)=rs.ItemName // Build list of files in the folder
        } else {
          if rec {
            $$$ThrowOnError(..UpdDir(rs.Name,rec))
          }
        }
      }
    
      // Build list of files in the database
      &SQL(SELECT %DLIST(Name) into :basefiles FROM Fileserver."File" WHERE Directory=:dir)
      
      // Find differense between lists of files in database and directory
      $$$ThrowOnError(..DiffList(basefiles,dirfiles,.added,.deleted))
    
      set ptr=0
      while $LISTNEXT(added,ptr,value) 
      {
        $$$ThrowOnError(..AddFile(dir_value))
      }

    } else {
      set st = $$$ERROR($$$DirectoryNotExist,dir)
    } 
  } catch ex {
    set st=ex.AsStatus()
  }
  quit st
]]></Implementation>
</Method>

<Method name="DiffList">
<Description><![CDATA[
Finds diff between two lists.<br>
<b>old</b> - original list.<br>
<b>new</b> - modified list.<br>
<b>.added</b> - list with all added elements (present in new list, absent in old list).<br>
<b>.deleted</b> - list with all deleted elements (present in old list, absent in new list).<br>]]></Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>old:%List,new:%List,*added:%List,*deleted:%List</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  #dim st As %Status = $$$OK
  quit:'$LISTVALID(old) $$$ERROR($$$AttributeValueMustBeList,"old")
  quit:'$LISTVALID(new) $$$ERROR($$$AttributeValueMustBeList,"new")
  try {
    do ..DelDuplList(.old),..DelDuplList(.new)
    for i=1:1 {
      quit:i>$LISTLENGTH(old)
      set match=$LISTFIND(new,$LIST(old,i))
      if match {
        set $LIST(old,i,i)=""
        set $LIST(new,match,match)=""
        set i=i-1
      }
    }
    set added=new
    set deleted=old
  } catch ex {
    set st=ex.AsStatus()
  }
  quit st
]]></Implementation>
</Method>

<Method name="DelDuplList">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&list:%List]]></FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
  set ptr=0
  while $LISTNEXT(list,ptr,value) {
    set:value'="" tmp(value)=""
  }
  set list=""
  set key=$ORDER(tmp(""))
  while (key'="") {
   set $LIST(list,*+1)=key
   set key=$ORDER(tmp(key))
  }
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Fileserver.FileD</DataLocation>
<DefaultData>FileDefaultData</DefaultData>
<IdLocation>^Fileserver.FileD</IdLocation>
<IndexLocation>^Fileserver.FileI</IndexLocation>
<StreamLocation>^Fileserver.FileS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="FileDefaultData">
<Value name="1">
<Value>Directory</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Extension</Value>
</Value>
<Value name="4">
<Value>Size</Value>
</Value>
<Value name="5">
<Value>DateCreated</Value>
</Value>
<Value name="6">
<Value>DateModified</Value>
</Value>
<Value name="7">
<Value>file</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
