<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Fileserver.File">
<Description>
Represents one file served on fileserver.</Description>
<ClassType>persistent</ClassType>
<IncludeCode>%occErrors</IncludeCode>
<Super>%Persistent</Super>
<TimeCreated>63140,72654.477177</TimeCreated>

<Property name="Name">
<Description>
Name of the file (without path, but with extension).</Description>
<Type>%String</Type>
</Property>

<Property name="Directory">
<Description>
Path of the file.</Description>
<Type>%String</Type>
</Property>

<Property name="Extension">
<Description>
Extension of the file.</Description>
<Type>%String</Type>
</Property>

<Property name="Size">
<Description>
Size of the file in bytes.</Description>
<Type>%BigInt</Type>
</Property>

<Property name="DateCreated">
<Description><![CDATA[
Date of creation of the file in <i>YYYY-MM-DD hh:mm:ss</i> format.]]></Description>
<Type>%TimeStamp</Type>
</Property>

<Property name="DateModified">
<Description><![CDATA[
Date of modification of the file in <i>YYYY-MM-DD hh:mm:ss</i> format.]]></Description>
<Type>%TimeStamp</Type>
</Property>

<Property name="Downloads">
<Description>
All downloads of the file</Description>
<Type>Fileserver.Download</Type>
<Cardinality>many</Cardinality>
<Inverse>File</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="DirName">
<Properties>Directory,Name</Properties>
<Unique>1</Unique>
</Index>

<UDLText name="T">
<Content><![CDATA[
// do ##class(Fileserver.File).AddDir("D:\Pictures\Desktop")

]]></Content>
</UDLText>

<Method name="AddDir">
<Description><![CDATA[
Add files from directory <b>dir</b> to fileserver.<br>
<b>rec</b> - recursive: 1 - to add subfolders, 0 - so skip them.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>dir:%String,rec:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	if ##class(%File).DirectoryExists(dir)
	{
		// Build resultset of all files and subfolders in a directory
		set rs=##Class(%ResultSet).%New("%File.FileSet")
 		do rs.Execute(dir,"*",,1) // build result set of all files in dir
 		while rs.Next() {
			if rs.Get("Type")'="D" //check for directories
			{
				set file=..%New()
				set file.Name=rs.Get("ItemName")
				set file.Directory=##class(%File).GetDirectory(rs.Get("Name"))
				set file.Extension=$p(file.Name,".",*)
				set file.Size=rs.Get("Size")
				set file.DateCreated=rs.Get("DateCreated")				
				set file.DateModified=rs.Get("DateModified")
				do file.%Save()
			} else {
				if (rec=1) {
					do ..AddDir(rs.Get("Name"),1)
				}
			} 
		}
	} else {
		set st = $$$ERROR($$$DirectoryNotExist,dir)
	}
	quit st
]]></Implementation>
</Method>

<Method name="AddFile">
<Description><![CDATA[
Add file to fileserver.<br>
<b>file</b> - full filename with path.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>filename:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	if ##class(%File).Exists(filename)
	{
		try {
			set file=..%New()
			set file.Name=##class(%File).GetFilename(filename)
			set file.Directory=##class(%File).GetDirectory(filename)
			set file.Extension=$p(file.Name,".",*)
			set file.Size=##class(%File).GetFileSize(filename)
			set file.DateCreated=$ZDATETIME(##class(%File).GetFileDateCreated(filename),3)	
			set file.DateModified=$ZDATETIME(##class(%File).GetFileDateModified(filename),3)
			do file.%Save()
		} catch ex {		
			set st=ex.AsStatus()
		}
	} else {
		set st = $$$ERROR($$$FileDoesNotExist,file)
	}
	quit st
]]></Implementation>
</Method>

<Method name="DelDir">
<Description><![CDATA[
Delete files from directory <b>dir</b> to fileserver.<br>
<b>rec</b> - recursive: 1 - to delete subfolders, 0 - so skip them.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>dir:%String,rec:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	set dir=##class(%File).NormalizeDirectory(dir)
	if (rec=0) {
		&SQL(DELETE FROM Fileserver."File" WHERE Directory=:dir)
		if (SQLCODE'=0) {
			set st = $System.Status.Error($$$SQLError, SQLCODE, dir)
		}
	} else {
		&SQL(DELETE FROM Fileserver."File" WHERE Directory %STARTSWITH :dir)
		if (SQLCODE'=0) {
			set st = $System.Status.Error($$$SQLError, SQLCODE, dir)
		}
	}
	quit st
]]></Implementation>
</Method>

<Method name="DelFileById">
<Description><![CDATA[
Delete file from fileserver.<br>
<b>fileid</b> - id of <class>Fileserver.File</class>.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>fileid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	&SQL(DELETE FROM Fileserver."File" WHERE ID=:fileid)
	if (SQLCODE'=0) {
		set st = $System.Status.Error($$$SQLError, SQLCODE, fileid)
	}
	quit st
]]></Implementation>
</Method>

<Method name="DelFile">
<Description><![CDATA[
Delete file from fileserver.<br>
<b>fileid</b> - id of <class>Fileserver.File</class>.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>filedir:%String,filename:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	&SQL(DELETE FROM Fileserver."File" WHERE Directory=:filedir and Name=:filename)
	if (SQLCODE'=0) {
		set st = $System.Status.Error($$$SQLError, SQLCODE, filedir_filename)
	}
	quit st
]]></Implementation>
</Method>

<Method name="UpdDir">
<Description><![CDATA[
Update files from directory <b>dir</b> on fileserver.<br>
<b>rec</b> - recursive: 1 - to update subfolders, 0 - so skip them.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>dir:%String,rec:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	set dir=##class(%File).NormalizeDirectory(dir)
	
	if ##class(%File).DirectoryExists(dir)
	{ 		
		set rs=##Class(%ResultSet).%New("%File.FileSet")
 		do rs.Execute(dir,"*",,1) // build result set of all files in dir
 		while rs.Next() {
			if rs.Get("Type")'="D" //check for directories
			{
				 set $list(dirfiles,*+1)=rs.Get("ItemName") // Build list of files in the folder
			} else {
				if (rec=1) {
					do ..UpdDir(rs.Get("Name"),1)
				}
			}
		}
		
		// Build list of files in the database
 		set sql = "SELECT Name FROM Fileserver.""File"" WHERE Directory=?"
  		set tStatement = ##class(%SQL.Statement).%New()	
		set st = tStatement.%Prepare(sql)
   		if (st'=1) quit st
   		set rset = tStatement.%Execute(dir)
   		while rset.%Next() {
	   		set $list(basefiles,*+1)=rset.%Get("Name")
     	}
     	
     	// Find differense between lists of files in database and directory
		do ..DiffList(basefiles,dirfiles,.added,.deleted)
		
		set ptr=0,count=0
   		while $LISTNEXT(added,ptr,value) 
   		{
    		SET count=count+1
   			do ..AddFile(dir_value)
   		}
   		
   		set ptr=0,count=0
   		while $LISTNEXT(deleted,ptr,value) 
   		{
    		SET count=count+1
   			do ..DelFile(dir,value)
   		}
	} else {
		set st = $$$ERROR($$$DirectoryNotExist,dir)
	}
	quit st
]]></Implementation>
</Method>

<Method name="DiffList">
<Description><![CDATA[
Finds diff between two lists.<br>
<b>old</b> - original list.<br>
<b>new</b> - modified list.<br>
<b>.added</b> - list with all added elements (present in new list, absent in old list.<br>
<b>.deleted</b> - list with all deleted elements (present in old list, absent in new list.<br>]]></Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>old:%List,new:%List,*added:%List,*deleted:%List</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	if ($LISTVALID(old)=0) quit $$$ERROR($$$AttributeValueMustBeList,"old")
	if ($LISTVALID(new)=0) quit $$$ERROR($$$AttributeValueMustBeList,"new")
    try {
    	for i=1:1:$LISTLENGTH(old) 
    	{
    		set match=$LISTFIND(new,$LIST(old,i))
    		if match'=0
    		{
	    		set $LIST(old,i)=""
	    		set $LIST(new,match)=""
    		}
    	}
    	set added=new
    	set deleted=old
    } catch ex {
	    set st=ex.AsStatus()
    }
    quit st
]]></Implementation>
</Method>

<Method name="ItsAllTheSameShit">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<Implementation><![CDATA[
	#dim st As %Status = $$$OK
	set st=$$$OK
	set st=1
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Fileserver.FileD</DataLocation>
<DefaultData>FileDefaultData</DefaultData>
<IdLocation>^Fileserver.FileD</IdLocation>
<IndexLocation>^Fileserver.FileI</IndexLocation>
<StreamLocation>^Fileserver.FileS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="FileDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Extension</Value>
</Value>
<Value name="3">
<Value>Size</Value>
</Value>
<Value name="4">
<Value>DateCreated</Value>
</Value>
<Value name="5">
<Value>DateModified</Value>
</Value>
<Value name="6">
<Value>Name</Value>
</Value>
<Value name="7">
<Value>Directory</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
