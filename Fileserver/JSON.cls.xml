<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Fileserver.JSON">
<Final>1</Final>
<Abstract>1</Abstract>
<IncludeCode>%occErrors,%occUtility</IncludeCode>
<TimeCreated>63879,84547</TimeCreated>
<ServerOnly>1</ServerOnly>

<Parameter name="UserFilesDir">
<Type>STRING</Type>
<Default>C:\UserFiles</Default>
</Parameter>

<Method name="CheckPermission">
<ClassMethod>1</ClassMethod>
<FormalSpec>FileID:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[  quit ##class(Fileserver.File).%ExistsId(FileID)
]]></Implementation>
</Method>

<Method name="GenerateDownload">
<Description>
Create Fileserver.Download object.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>FileID:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  set download=##class(Fileserver.Download).%New()
  do download.FileSetObjectId(FileID)
  do download.%Save()
  quit download.%Id()
]]></Implementation>
</Method>

<Method name="FileListToJSON">
<Description>
Converts SQL query result to JSON.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  do ##class(%ZEN.Auxiliary.altJSONSQLProvider).%WriteJSONFromSQL(,"select TOP 100 %ID,Name,Size,Extension from Fileserver.File order by DateModified desc,Name",,0)
  quit $$$OK
]]></Implementation>
</Method>

<Method name="RequestFile">
<Description>
Custom user actions to get access to file.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>FileID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  if ..CheckPermission(FileID) {
    set %response.ContentType="text/html"
    &html<<!DOCTYPE html>
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1, user-scalable=no"/>
  <title> Fileserver </title>
</head>
<html>
  <body style="text-align: center;">
    <h2>Your download is ready</h2>
    <h3>Active only for your IP for the next 24 hours</h3>
    <a href="#("../download/"_..GenerateDownload(FileID))#">Click to start your download</a>
  </body>
</html>>
  }
  quit $$$OK
]]></Implementation>
</Method>

<Method name="DownloadFile">
<Description>
Check if user has a correct Fileserver.Download object, serve him his file.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>DownloadId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  #dim %request As %CSP.Request
  #dim %response As %CSP.Response
  #dim st As %Status = $$$OK
  try {
    &SQL(SELECT %OBJECT("File"->"file"),"File"->Name INTO :oref,:name FROM Fileserver.Download WHERE DownloadID=:DownloadId and IP=:%request.GetCgiEnv("REMOTE_ADDR") and DATEADD('hh',-24,{fn NOW})<=DateCreated)
    if (SQLCODE=0) {
      &SQL(UPDATE Fileserver.Download SET DownloadCount=DownloadCount+1 WHERE DownloadID=:DownloadId)

      kill %request.Data
      set %request.Data("STREAMOID",1)=##class(%CSP.StreamServer).Encrypt(##class(%CSP.StreamServer).GetOidForFile(oref.Id))
      if ##class(%CSP.StreamServer).OnPreHTTP() {
        set %response.Headers("Content-Disposition")="attachment; filename*=UTF-8''"_##class(%CSP.Page).EscapeURL(name,"UTF8")
        $$$ThrowOnError(##class(%CSP.StreamServer).OnPage())
      }
      
    } else {
      set st = $$$ERROR($$$GeneralError, "DownloadID not found, or download time limit exceeded, or another IP")
    }
  }catch ex {
    set st=ex.AsStatus()
  }
  quit st
]]></Implementation>
</Method>

<Method name="UploadFile">
<Description>
Check if user has a correct Fileserver.Download object, serve him his file.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  #dim %request As %CSP.Request
  #dim st As %Status = $$$OK
  try { 
    set Location=##class(%File).NormalizeDirectory($GET(^Settings("user_files_dir"),..#UserFilesDir))
    if '##class(%File).DirectoryExists(Location),'##class(%File).CreateDirectoryChain(Location) {
      $$$ThrowStatus($$$ERROR($$$DirectoryCannotCreate,Location))
    }
    set Stream=%request.GetMimeData("fotofile0")
    if $IsObject(Stream) {
      set filename=##class(%File).GetFilename(Stream.FileName)
      set Name=$PIECE(filename,".",0,*-1)
      set Extension=$PIECE(filename,".",*)
      set FileName=Location_Name_"."_Extension

      set counter = 1
      while ##class(%File).Exists(FileName) 
      {
        set FileName=Location_Name_"("_counter_")."_Extension
        set counter=counter+1
      }
      set file=##class(%Stream.FileBinary).%New()
      set file.Filename=FileName
      $$$ThrowOnError(file.CopyFromAndSave(Stream))
    }
    $$$ThrowOnError(##class(Fileserver.File).AddFile(FileName))
  }catch ex {
    set st=ex.AsStatus()
  }
  quit st
]]></Implementation>
</Method>
</Class>
</Export>
