<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Fileserver.JSON">
<IncludeCode>%occErrors</IncludeCode>
<Super>%Base</Super>
<TimeCreated>63140,78388.642251</TimeCreated>

<Method name="FileListToJSON">
<Description>
Converts SQL query result to JSON.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
		set st=$$$OK
		try{
			do ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,"SELECT ID, Name, Size, Extension FROM Fileserver.File")
		} catch ex{
			set st=ex.AsStatus()
		}
    	quit st
]]></Implementation>
</Method>

<Method name="CheckPermission">
<ClassMethod>1</ClassMethod>
<FormalSpec>FileID:%Integer</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	quit 1
]]></Implementation>
</Method>

<Method name="RequestFile">
<Description>
Custom user actions to get access to file.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>FileID:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set FileID=$ZSTRIP(FileID,"*E'N")
	if (..CheckPermission(FileID))
	{
		set DownloadId=..GenerateDownload(FileID)
		set DownloadLink="http://"_%request.GetCgiEnv("HTTP_HOST")_"/fileserver/download/"_DownloadId
		&html<
		<html>
		<body style="text-align: center;">
			<h2>Your download is ready</h2>
			<h3>Active only for your IP for the next 24 hours</h3>
			<a href="#(DownloadLink)#">Click to start your download</a>
		</body>
		</html>			
		>
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GenerateDownload">
<Description>
Create Fileserver.Download object.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>FileID:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set download=##class(Fileserver.Download).%New()
	set download.DateCreated=$ZDATETIME($NOW(),3)
	set download.DateActiveUntil=$ZDATETIME(($PIECE($NOW(),",",1)+1)_","_$PIECE($NOW(),",",2),3) // Active for 24 hours
	set download.IP=%request.GetCgiEnv("REMOTE_ADDR")
	set download.File=##class(Fileserver.File).%OpenId(FileID)
	do download.DownloadIDGenerate()
	set DownloadID = download.DownloadID
	do download.%Save()
	kill download
	quit DownloadID
]]></Implementation>
</Method>

<Method name="DownloadFile">
<Description>
Check if user has a correct Fileserver.Download object, serve him his file.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>DownloadId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	try {
		&SQL(SELECT "File"->"Name","File"->"Directory","File"->"Size","IP","DownloadCount","DateActiveUntil" INTO :fname, :fdir, :fsize, :ip,:dcount,:dateactive FROM Fileserver.Download WHERE DownloadID=:DownloadId)
		if (SQLCODE=0)
		{
			if ((ip=%request.GetCgiEnv("REMOTE_ADDR")) && ($ZDATETIMEH(dateactive,3,1)>$HOROLOG))
			{
				//w $ZDATETIMEH(dateactive,3,1)," ",$HOROLOG
				set dcount=dcount+1
				&SQL(UPDATE Fileserver.Download SET "DownloadCount"=:dcount WHERE DownloadID=:DownloadId)
				//set %response.ContentLength=fsize
				set %response.ContentType="application/octet-stream"
				
				do %response.SetHeader("Content-Disposition","attachment; filename="""_fname_"""")
				set stream=##class(%FileBinaryStream).%New()
				set stream.Filename=fdir_fname
				while 'stream.AtEnd {
				set line=stream.Read()
					write line
				}
			}
			else {
				set st=$System.Status.Error($$$GeneralError,"Download time limit exceeded, or another IP")
			}
		} else {
			set st = $System.Status.Error($$$SQLError, SQLCODE, "DownloadID not found")
		}
	}catch ex {
		set st=$$$ADDSC($System.Status.Error($$$GeneralError,ex.AsSystemError()), st)
	}
	quit st
]]></Implementation>
</Method>

<Method name="UploadFile">
<Description>
Check if user has a correct Fileserver.Download object, serve him his file.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim st As %Status = $$$OK
	try {	
 		set Location=$g(^Settings("user_files_dir"),"C:\UserFiles\")
		set Stream =%request.GetMimeData("fotofile0",1)
		set Name=$p(Stream.FileName,".",0,*-1)
		set Extension=$p(Stream.FileName,".",*)
		set FileName=Location_Name_"."_Extension

		set counter = 1
		while ##class(%File).Exists(FileName) 
		{
			set FileName=Location_Name_"_("_counter_")."_Extension
			set counter=counter+1
		}
		set file=##class(%Stream.FileBinary).%New()
		set file.Filename=FileName
		do file.CopyFromAndSave(Stream)
		
		do ##class(Fileserver.File).AddFile(FileName)
		
		kill file
	}catch ex {
		set st=$$$ADDSC($System.Status.Error($$$GeneralError,ex.AsSystemError()), st)
	}
	quit st
]]></Implementation>
</Method>
</Class>
</Export>
